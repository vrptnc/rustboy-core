use crate::memory::memory::Memory;

pub struct InstructionLabelProvider {}

impl InstructionLabelProvider {
  fn get_prefix_label(memory: &dyn Memory, address: u16) -> String {
    match memory.read(address) {
      0x00 => String::from("RLC B"),
      0x01 => String::from("RLC C"),
      0x02 => String::from("RLC D"),
      0x03 => String::from("RLC E"),
      0x04 => String::from("RLC H"),
      0x05 => String::from("RLC L"),
      0x06 => String::from("RLC (HL)"),
      0x07 => String::from("RLC A"),
      0x08 => String::from("RRC B"),
      0x09 => String::from("RRC C"),
      0x0A => String::from("RRC D"),
      0x0B => String::from("RRC E"),
      0x0C => String::from("RRC H"),
      0x0D => String::from("RRC L"),
      0x0E => String::from("RRC (HL)"),
      0x0F => String::from("RRC A"),
      0x10 => String::from("RL B"),
      0x11 => String::from("RL C"),
      0x12 => String::from("RL D"),
      0x13 => String::from("RL E"),
      0x14 => String::from("RL H"),
      0x15 => String::from("RL L"),
      0x16 => String::from("RL (HL)"),
      0x17 => String::from("RL A"),
      0x18 => String::from("RR B"),
      0x19 => String::from("RR C"),
      0x1A => String::from("RR D"),
      0x1B => String::from("RR E"),
      0x1C => String::from("RR H"),
      0x1D => String::from("RR L"),
      0x1E => String::from("RR (HL)"),
      0x1F => String::from("RR A"),
      0x20 => String::from("SLA B"),
      0x21 => String::from("SLA C"),
      0x22 => String::from("SLA D"),
      0x23 => String::from("SLA E"),
      0x24 => String::from("SLA H"),
      0x25 => String::from("SLA L"),
      0x26 => String::from("SLA (HL)"),
      0x27 => String::from("SLA A"),
      0x28 => String::from("SRA B"),
      0x29 => String::from("SRA C"),
      0x2A => String::from("SRA D"),
      0x2B => String::from("SRA E"),
      0x2C => String::from("SRA H"),
      0x2D => String::from("SRA L"),
      0x2E => String::from("SRA (HL)"),
      0x2F => String::from("SRA A"),
      0x30 => String::from("SWAP B"),
      0x31 => String::from("SWAP C"),
      0x32 => String::from("SWAP D"),
      0x33 => String::from("SWAP E"),
      0x34 => String::from("SWAP H"),
      0x35 => String::from("SWAP L"),
      0x36 => String::from("SWAP (HL)"),
      0x37 => String::from("SWAP A"),
      0x38 => String::from("SRL B"),
      0x39 => String::from("SRL C"),
      0x3A => String::from("SRL D"),
      0x3B => String::from("SRL E"),
      0x3C => String::from("SRL H"),
      0x3D => String::from("SRL L"),
      0x3E => String::from("SRL (HL)"),
      0x3F => String::from("SRL A"),
      0x40 => String::from("BIT 0,B"),
      0x41 => String::from("BIT 0,C"),
      0x42 => String::from("BIT 0,D"),
      0x43 => String::from("BIT 0,E"),
      0x44 => String::from("BIT 0,H"),
      0x45 => String::from("BIT 0,L"),
      0x46 => String::from("BIT 0,(HL)"),
      0x47 => String::from("BIT 0,A"),
      0x48 => String::from("BIT 1,B"),
      0x49 => String::from("BIT 1,C"),
      0x4A => String::from("BIT 1,D"),
      0x4B => String::from("BIT 1,E"),
      0x4C => String::from("BIT 1,H"),
      0x4D => String::from("BIT 1,L"),
      0x4E => String::from("BIT 1,(HL)"),
      0x4F => String::from("BIT 1,A"),
      0x50 => String::from("BIT 2,B"),
      0x51 => String::from("BIT 2,C"),
      0x52 => String::from("BIT 2,D"),
      0x53 => String::from("BIT 2,E"),
      0x54 => String::from("BIT 2,H"),
      0x55 => String::from("BIT 2,L"),
      0x56 => String::from("BIT 2,(HL)"),
      0x57 => String::from("BIT 2,A"),
      0x58 => String::from("BIT 3,B"),
      0x59 => String::from("BIT 3,C"),
      0x5A => String::from("BIT 3,D"),
      0x5B => String::from("BIT 3,E"),
      0x5C => String::from("BIT 3,H"),
      0x5D => String::from("BIT 3,L"),
      0x5E => String::from("BIT 3,(HL)"),
      0x5F => String::from("BIT 3,A"),
      0x60 => String::from("BIT 4,B"),
      0x61 => String::from("BIT 4,C"),
      0x62 => String::from("BIT 4,D"),
      0x63 => String::from("BIT 4,E"),
      0x64 => String::from("BIT 4,H"),
      0x65 => String::from("BIT 4,L"),
      0x66 => String::from("BIT 4,(HL)"),
      0x67 => String::from("BIT 4,A"),
      0x68 => String::from("BIT 5,B"),
      0x69 => String::from("BIT 5,C"),
      0x6A => String::from("BIT 5,D"),
      0x6B => String::from("BIT 5,E"),
      0x6C => String::from("BIT 5,H"),
      0x6D => String::from("BIT 5,L"),
      0x6E => String::from("BIT 5,(HL)"),
      0x6F => String::from("BIT 5,A"),
      0x70 => String::from("BIT 6,B"),
      0x71 => String::from("BIT 6,C"),
      0x72 => String::from("BIT 6,D"),
      0x73 => String::from("BIT 6,E"),
      0x74 => String::from("BIT 6,H"),
      0x75 => String::from("BIT 6,L"),
      0x76 => String::from("BIT 6,(HL)"),
      0x77 => String::from("BIT 6,A"),
      0x78 => String::from("BIT 7,B"),
      0x79 => String::from("BIT 7,C"),
      0x7A => String::from("BIT 7,D"),
      0x7B => String::from("BIT 7,E"),
      0x7C => String::from("BIT 7,H"),
      0x7D => String::from("BIT 7,L"),
      0x7E => String::from("BIT 7,(HL)"),
      0x7F => String::from("BIT 7,A"),
      0x80 => String::from("RES 0,B"),
      0x81 => String::from("RES 0,C"),
      0x82 => String::from("RES 0,D"),
      0x83 => String::from("RES 0,E"),
      0x84 => String::from("RES 0,H"),
      0x85 => String::from("RES 0,L"),
      0x86 => String::from("RES 0,(HL)"),
      0x87 => String::from("RES 0,A"),
      0x88 => String::from("RES 1,B"),
      0x89 => String::from("RES 1,C"),
      0x8A => String::from("RES 1,D"),
      0x8B => String::from("RES 1,E"),
      0x8C => String::from("RES 1,H"),
      0x8D => String::from("RES 1,L"),
      0x8E => String::from("RES 1,(HL)"),
      0x8F => String::from("RES 1,A"),
      0x90 => String::from("RES 2,B"),
      0x91 => String::from("RES 2,C"),
      0x92 => String::from("RES 2,D"),
      0x93 => String::from("RES 2,E"),
      0x94 => String::from("RES 2,H"),
      0x95 => String::from("RES 2,L"),
      0x96 => String::from("RES 2,(HL)"),
      0x97 => String::from("RES 2,A"),
      0x98 => String::from("RES 3,B"),
      0x99 => String::from("RES 3,C"),
      0x9A => String::from("RES 3,D"),
      0x9B => String::from("RES 3,E"),
      0x9C => String::from("RES 3,H"),
      0x9D => String::from("RES 3,L"),
      0x9E => String::from("RES 3,(HL)"),
      0x9F => String::from("RES 3,A"),
      0xA0 => String::from("RES 4,B"),
      0xA1 => String::from("RES 4,C"),
      0xA2 => String::from("RES 4,D"),
      0xA3 => String::from("RES 4,E"),
      0xA4 => String::from("RES 4,H"),
      0xA5 => String::from("RES 4,L"),
      0xA6 => String::from("RES 4,(HL)"),
      0xA7 => String::from("RES 4,A"),
      0xA8 => String::from("RES 5,B"),
      0xA9 => String::from("RES 5,C"),
      0xAA => String::from("RES 5,D"),
      0xAB => String::from("RES 5,E"),
      0xAC => String::from("RES 5,H"),
      0xAD => String::from("RES 5,L"),
      0xAE => String::from("RES 5,(HL)"),
      0xAF => String::from("RES 5,A"),
      0xB0 => String::from("RES 6,B"),
      0xB1 => String::from("RES 6,C"),
      0xB2 => String::from("RES 6,D"),
      0xB3 => String::from("RES 6,E"),
      0xB4 => String::from("RES 6,H"),
      0xB5 => String::from("RES 6,L"),
      0xB6 => String::from("RES 6,(HL)"),
      0xB7 => String::from("RES 6,A"),
      0xB8 => String::from("RES 7,B"),
      0xB9 => String::from("RES 7,C"),
      0xBA => String::from("RES 7,D"),
      0xBB => String::from("RES 7,E"),
      0xBC => String::from("RES 7,H"),
      0xBD => String::from("RES 7,L"),
      0xBE => String::from("RES 7,(HL)"),
      0xBF => String::from("RES 7,A"),
      0xC0 => String::from("SET 0,B"),
      0xC1 => String::from("SET 0,C"),
      0xC2 => String::from("SET 0,D"),
      0xC3 => String::from("SET 0,E"),
      0xC4 => String::from("SET 0,H"),
      0xC5 => String::from("SET 0,L"),
      0xC6 => String::from("SET 0,(HL)"),
      0xC7 => String::from("SET 0,A"),
      0xC8 => String::from("SET 1,B"),
      0xC9 => String::from("SET 1,C"),
      0xCA => String::from("SET 1,D"),
      0xCB => String::from("SET 1,E"),
      0xCC => String::from("SET 1,H"),
      0xCD => String::from("SET 1,L"),
      0xCE => String::from("SET 1,(HL)"),
      0xCF => String::from("SET 1,A"),
      0xD0 => String::from("SET 2,B"),
      0xD1 => String::from("SET 2,C"),
      0xD2 => String::from("SET 2,D"),
      0xD3 => String::from("SET 2,E"),
      0xD4 => String::from("SET 2,H"),
      0xD5 => String::from("SET 2,L"),
      0xD6 => String::from("SET 2,(HL)"),
      0xD7 => String::from("SET 2,A"),
      0xD8 => String::from("SET 3,B"),
      0xD9 => String::from("SET 3,C"),
      0xDA => String::from("SET 3,D"),
      0xDB => String::from("SET 3,E"),
      0xDC => String::from("SET 3,H"),
      0xDD => String::from("SET 3,L"),
      0xDE => String::from("SET 3,(HL)"),
      0xDF => String::from("SET 3,A"),
      0xE0 => String::from("SET 4,B"),
      0xE1 => String::from("SET 4,C"),
      0xE2 => String::from("SET 4,D"),
      0xE3 => String::from("SET 4,E"),
      0xE4 => String::from("SET 4,H"),
      0xE5 => String::from("SET 4,L"),
      0xE6 => String::from("SET 4,(HL)"),
      0xE7 => String::from("SET 4,A"),
      0xE8 => String::from("SET 5,B"),
      0xE9 => String::from("SET 5,C"),
      0xEA => String::from("SET 5,D"),
      0xEB => String::from("SET 5,E"),
      0xEC => String::from("SET 5,H"),
      0xED => String::from("SET 5,L"),
      0xEE => String::from("SET 5,(HL)"),
      0xEF => String::from("SET 5,A"),
      0xF0 => String::from("SET 6,B"),
      0xF1 => String::from("SET 6,C"),
      0xF2 => String::from("SET 6,D"),
      0xF3 => String::from("SET 6,E"),
      0xF4 => String::from("SET 6,H"),
      0xF5 => String::from("SET 6,L"),
      0xF6 => String::from("SET 6,(HL)"),
      0xF7 => String::from("SET 6,A"),
      0xF8 => String::from("SET 7,B"),
      0xF9 => String::from("SET 7,C"),
      0xFA => String::from("SET 7,D"),
      0xFB => String::from("SET 7,E"),
      0xFC => String::from("SET 7,H"),
      0xFD => String::from("SET 7,L"),
      0xFE => String::from("SET 7,(HL)"),
      0xFF => String::from("SET 7,A")
    }
  }

  pub fn get_label(memory: &dyn Memory, address: u16) -> String {
    match memory.read(address) {
      0x00 => String::from("NOP"),
      0x01 => {
        let value = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("LD BC,{:#x}", value)
      }
      0x02 => String::from("LD (BC),A"),
      0x03 => String::from("INC BC"),
      0x04 => String::from("INC B"),
      0x05 => String::from("DEC B"),
      0x06 => format!("LD B,{:#x}", memory.read(address + 1)),
      0x07 => String::from("RLCA"),
      0x08 => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("LD ({:#x}),SP", address)
      }
      0x09 => String::from("ADD HL,BC"),
      0x0A => String::from("LD A,(BC)"),
      0x0B => String::from("DEC BC"),
      0x0C => String::from("INC C"),
      0x0D => String::from("DEC C"),
      0x0E => format!("LD C,{:#x}", memory.read(address + 1)),
      0x0F => String::from("RRCA"),
      0x10 => String::from("STOP"),
      0x11 => {
        let value = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("LD DE,{:#x}", value)
      }
      0x12 => String::from("LD (DE),A"),
      0x13 => String::from("INC DE"),
      0x14 => String::from("INC D"),
      0x15 => String::from("DEC D"),
      0x16 => format!("LD D,{:#x}", memory.read(address + 1)),
      0x17 => String::from("RLA"),
      0x18 => format!("JR {}", memory.read(address + 1) as i8),
      0x19 => String::from("ADD HL,DE"),
      0x1A => String::from("LD A,(DE)"),
      0x1B => String::from("DEC DE"),
      0x1C => String::from("INC E"),
      0x1D => String::from("DEC E"),
      0x1E => format!("LD E,{:#x}", memory.read(address + 1)),
      0x1F => String::from("RRA"),
      0x20 => format!("JR NZ,{}", memory.read(address + 1) as i8),
      0x21 => {
        let value = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("LD HL,{:#x}", value)
      }
      0x22 => String::from("LD (HL+),A"),
      0x23 => String::from("INC HL"),
      0x24 => String::from("INC H"),
      0x25 => String::from("DEC H"),
      0x26 => format!("LD H,{:#x}", memory.read(address + 1)),
      0x27 => String::from("DAA"),
      0x28 => format!("JR Z,{}", memory.read(address + 1) as i8),
      0x29 => String::from("ADD HL,HL"),
      0x2A => String::from("LD A,(HL+)"),
      0x2B => String::from("DEC HL"),
      0x2C => String::from("INC L"),
      0x2D => String::from("DEC L"),
      0x2E => format!("LD L,{:#x}", memory.read(address + 1)),
      0x2F => String::from("CPL"),
      0x30 => format!("JR NC,{}", memory.read(address + 1) as i8),
      0x31 => {
        let value = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("LD SP,{:#x}", value)
      }
      0x32 => String::from("LD (HL-),A"),
      0x33 => String::from("INC SP"),
      0x34 => String::from("INC (HL)"),
      0x35 => String::from("DEC (HL)"),
      0x36 => format!("LD (HL),{:#x}", memory.read(address + 1)),
      0x37 => String::from("SCF"),
      0x38 => format!("JR C,{}", memory.read(address + 1) as i8),
      0x39 => String::from("ADD HL,SP"),
      0x3A => String::from("LD A,(HL-)"),
      0x3B => String::from("DEC SP"),
      0x3C => String::from("INC A"),
      0x3D => String::from("DEC A"),
      0x3E => format!("LD A,{:#x}", memory.read(address + 1)),
      0x3F => String::from("CCF"),
      0x40 => String::from("LD B,B"),
      0x41 => String::from("LD B,C"),
      0x42 => String::from("LD B,D"),
      0x43 => String::from("LD B,E"),
      0x44 => String::from("LD B,H"),
      0x45 => String::from("LD B,L"),
      0x46 => String::from("LD B,(HL)"),
      0x47 => String::from("LD B,A"),
      0x48 => String::from("LD C,B"),
      0x49 => String::from("LD C,C"),
      0x4A => String::from("LD C,D"),
      0x4B => String::from("LD C,E"),
      0x4C => String::from("LD C,H"),
      0x4D => String::from("LD C,L"),
      0x4E => String::from("LD C,(HL)"),
      0x4F => String::from("LD C,A"),
      0x50 => String::from("LD D,B"),
      0x51 => String::from("LD D,C"),
      0x52 => String::from("LD D,D"),
      0x53 => String::from("LD D,E"),
      0x54 => String::from("LD D,H"),
      0x55 => String::from("LD D,L"),
      0x56 => String::from("LD D,(HL)"),
      0x57 => String::from("LD D,A"),
      0x58 => String::from("LD E,B"),
      0x59 => String::from("LD E,C"),
      0x5A => String::from("LD E,D"),
      0x5B => String::from("LD E,E"),
      0x5C => String::from("LD E,H"),
      0x5D => String::from("LD E,L"),
      0x5E => String::from("LD E,(HL)"),
      0x5F => String::from("LD E,A"),
      0x60 => String::from("LD H,B"),
      0x61 => String::from("LD H,C"),
      0x62 => String::from("LD H,D"),
      0x63 => String::from("LD H,E"),
      0x64 => String::from("LD H,H"),
      0x65 => String::from("LD H,L"),
      0x66 => String::from("LD H,(HL)"),
      0x67 => String::from("LD H,A"),
      0x68 => String::from("LD L,B"),
      0x69 => String::from("LD L,C"),
      0x6A => String::from("LD L,D"),
      0x6B => String::from("LD L,E"),
      0x6C => String::from("LD L,H"),
      0x6D => String::from("LD L,L"),
      0x6E => String::from("LD L,(HL)"),
      0x6F => String::from("LD L,A"),
      0x70 => String::from("LD (HL),B"),
      0x71 => String::from("LD (HL),C"),
      0x72 => String::from("LD (HL),D"),
      0x73 => String::from("LD (HL),E"),
      0x74 => String::from("LD (HL),H"),
      0x75 => String::from("LD (HL),L"),
      0x76 => String::from("HALT"),
      0x77 => String::from("LD (HL),A"),
      0x78 => String::from("LD A,B"),
      0x79 => String::from("LD A,C"),
      0x7A => String::from("LD A,D"),
      0x7B => String::from("LD A,E"),
      0x7C => String::from("LD A,H"),
      0x7D => String::from("LD A,L"),
      0x7E => String::from("LD A,(HL)"),
      0x7F => String::from("LD A,A"),
      0x80 => String::from("ADD A,B"),
      0x81 => String::from("ADD A,C"),
      0x82 => String::from("ADD A,D"),
      0x83 => String::from("ADD A,E"),
      0x84 => String::from("ADD A,H"),
      0x85 => String::from("ADD A,L"),
      0x86 => String::from("ADD A,(HL)"),
      0x87 => String::from("ADD A,A"),
      0x88 => String::from("ADC A,B"),
      0x89 => String::from("ADC A,C"),
      0x8A => String::from("ADC A,D"),
      0x8B => String::from("ADC A,E"),
      0x8C => String::from("ADC A,H"),
      0x8D => String::from("ADC A,L"),
      0x8E => String::from("ADC A,(HL)"),
      0x8F => String::from("ADC A,A"),
      0x90 => String::from("SUB A,B"),
      0x91 => String::from("SUB A,C"),
      0x92 => String::from("SUB A,D"),
      0x93 => String::from("SUB A,E"),
      0x94 => String::from("SUB A,H"),
      0x95 => String::from("SUB A,L"),
      0x96 => String::from("SUB A,(HL)"),
      0x97 => String::from("SUB A,A"),
      0x98 => String::from("SBC A,B"),
      0x99 => String::from("SBC A,C"),
      0x9A => String::from("SBC A,D"),
      0x9B => String::from("SBC A,E"),
      0x9C => String::from("SBC A,H"),
      0x9D => String::from("SBC A,L"),
      0x9E => String::from("SBC A,(HL)"),
      0x9F => String::from("SBC A,A"),
      0xA0 => String::from("AND A,B"),
      0xA1 => String::from("AND A,C"),
      0xA2 => String::from("AND A,D"),
      0xA3 => String::from("AND A,E"),
      0xA4 => String::from("AND A,H"),
      0xA5 => String::from("AND A,L"),
      0xA6 => String::from("AND A,(HL)"),
      0xA7 => String::from("AND A,A"),
      0xA8 => String::from("XOR A,B"),
      0xA9 => String::from("XOR A,C"),
      0xAA => String::from("XOR A,D"),
      0xAB => String::from("XOR A,E"),
      0xAC => String::from("XOR A,H"),
      0xAD => String::from("XOR A,L"),
      0xAE => String::from("XOR A,(HL)"),
      0xAF => String::from("XOR A,A"),
      0xB0 => String::from("OR A,B"),
      0xB1 => String::from("OR A,C"),
      0xB2 => String::from("OR A,D"),
      0xB3 => String::from("OR A,E"),
      0xB4 => String::from("OR A,H"),
      0xB5 => String::from("OR A,L"),
      0xB6 => String::from("OR A,(HL)"),
      0xB7 => String::from("OR A,A"),
      0xB8 => String::from("CP A,B"),
      0xB9 => String::from("CP A,C"),
      0xBA => String::from("CP A,D"),
      0xBB => String::from("CP A,E"),
      0xBC => String::from("CP A,H"),
      0xBD => String::from("CP A,L"),
      0xBE => String::from("CP A,(HL)"),
      0xBF => String::from("CP A,A"),
      0xC0 => String::from("RET NZ"),
      0xC1 => String::from("POP BC"),
      0xC2 => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("JP NZ,{:#x}", address)
      }
      0xC3 => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("JP {:#x}", address)
      }
      0xC4 => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("CALL NZ,{:#x}", address)
      }
      0xC5 => String::from("PUSH BC"),
      0xC6 => format!("ADD A,{:#x}", memory.read(address + 1)),
      0xC7 => String::from("RST 00"),
      0xC8 => String::from("RET Z"),
      0xC9 => String::from("RET"),
      0xCA => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("JP Z,{:#x}", address)
      }
      0xCB => InstructionLabelProvider::get_prefix_label(memory, address + 1),
      0xCC => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("CALL Z,{:#x}", address)
      }
      0xCD => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("CALL {:#x}", address)
      }
      0xCE => format!("ADC A, {:#x}", memory.read(address + 1)),
      0xCF => String::from("REST 08"),
      0xD0 => String::from("RET NC"),
      0xD1 => String::from("POP DE"),
      0xD2 => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("JP NC,{:#x}", address)
      }
      0xD4 => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("CALL NC,{:#x}", address)
      }
      0xD5 => String::from("PUSH DE"),
      0xD6 => format!("SUB A,{:#x}", memory.read(address + 1)),
      0xD7 => String::from("RST 10"),
      0xD8 => String::from("RET C"),
      0xD9 => String::from("RETI"),
      0xDA => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("JP C,{:#x}", address)
      }
      0xDC => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("CALL C,{:#x}", address)
      }
      0xDE => format!("SBC A,{:#x}", memory.read(address + 1)),
      0xDF => String::from("RST 18"),
      0xE0 => {
        let address = memory.read(address + 1) as u16 + 0xFF00u16;
        format!("LD ({:#x}),A", address)
      }
      0xE1 => String::from("POP HL"),
      0xE2 => String::from("LD (FF00+C),A"),
      0xE5 => String::from("PUSH HL"),
      0xE6 => format!("AND A,{:#x}", memory.read(address + 1)),
      0xE7 => String::from("RST 20"),
      0xE8 => format!("ADD SP,{}", memory.read(address + 1) as i8),
      0xE9 => String::from("JP HL"),
      0xEA => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("LD ({:#x}),A", address)
      }
      0xEE => format!("ZOR A,{:#x}", memory.read(address + 1)),
      0xEF => String::from("RST 28"),
      0xF0 => {
        let address = memory.read(address + 1) as u16 + 0xFF00u16;
        format!("LD A,({:#x})", address)
      }
      0xF1 => String::from("POP AF"),
      0xF2 => String::from("LD A,(FF00+C)"),
      0xF3 => String::from("DI"),
      0xF5 => String::from("PUSH AF"),
      0xF6 => format!("OR A,{:#x}", memory.read(address + 1)),
      0xF7 => String::from("RST 30"),
      0xF8 => format!("LD HL,SP+ {}", memory.read(address + 1) as i8),
      0xF9 => String::from("LD SP,HL"),
      0xFA => {
        let address = memory.read(address + 1) as u16 | ((memory.read(address + 2) as u16) << 8);
        format!("LD A,({:#x})", address)
      }
      0xFB => String::from("EI"),
      0xFE => format!("CP A,{:#x}", memory.read(address + 1)),
      0xFF => String::from("RST 38"),
      _ => String::from("")
    }
  }
}